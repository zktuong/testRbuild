name: tests

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"

env:
  cache-version: 'cache-v1'

jobs:
  tests:    
    timeout-minutes: 720
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      max-parallel: 2
      matrix:
        config:
          - { os: ubuntu-latest }
          - { os: macos-latest }
    runs-on: ${{ matrix.config.os }}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      NOT_CRAN: true
      TZ: UTC
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
    
    - name: Install ubuntu system dependencies
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        sudo apt-get install libcurl4-openssl-dev
        sudo apt-get update -y && sudo apt-get install -y zlib1g-dev libglpk-dev libgmp3-dev libxml2-dev libicu-dev libhdf5-serial-dev

    - name: Install macOS system dependencies
      if: matrix.config.os == 'macos-latest'
      run: |
        brew install cairo pkg-config autoconf automake libtool

    - id: R
      name: Check R version
      run: |
        R --version > VERSION        
        echo "##[set-output name=version;]$(head -1 VERSION | awk '{print $3}')"
        echo "##[set-output name=mainbiocversion;]$(Rscript -e 'cat(unlist(tools:::.BioC_version_associated_with_R_version()))' | awk '{print $1}')"
        echo "##[set-output name=subbiocversion;]$(Rscript -e 'cat(unlist(tools:::.BioC_version_associated_with_R_version()))' | awk '{print $2}')"
        echo "##[set-output name=biocversion;]$(Rscript -e 'cat(as.character(tools:::.BioC_version_associated_with_R_version()))' | awk '{print $1}')"
      shell: bash -l {0}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ steps.R.outputs.version}}

    - name: Setup r-lib/remotes      
      run: |
        install.packages('remotes')
      shell: Rscript {0}
    
    - name: Cache ubuntu R packages
      if: "!contains(github.event.head_commit.message, '/nocache') && matrix.config.os == 'ubuntu-latest'"
      uses: actions/cache@v2
      with:
        path: /home/runner/work/_temp/Library
        key: ${{ env.cache-version }}-${{ matrix.config.os }}-biocversion-RELEASE_${{ steps.R.outputs.mainbiocversion}}_${{ steps.R.outputs.subbiocversion}}-r-${{ steps.R.outputs.version}}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ env.cache-version }}-${{ matrix.config.os }}-biocversion-RELEASE_${{ steps.R.outputs.mainbiocversion}}_${{ steps.R.outputs.subbiocversion}}-r-${{ steps.R.outputs.version}}-

    - name: Cache macOS R packages
      if: "!contains(github.event.head_commit.message, '/nocache') && matrix.config.os != 'ubuntu-latest'"
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ env.cache-version }}-${{ matrix.config.os }}-biocversion-RELEASE_${{ steps.R.outputs.mainbiocversion}}_${{ steps.R.outputs.subbiocversion}}-r-${{ steps.R.outputs.version}}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ env.cache-version }}-${{ matrix.config.os }}-biocversion-RELEASE_${{ steps.R.outputs.mainbiocversion}}_${{ steps.R.outputs.subbiocversion}}-r-${{ steps.R.outputs.version}}-

    - name: Install ubuntu R dependencies
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        install.packages(c('RCurl','XML'))
        remotes::install_cran("BiocManager")
        BiocManager::install(version = ${{ steps.R.outputs.biocversion}}, ask = FALSE)
        BiocManager::install(c('GenomeInfoDb', 'Rsamtools'))
        BiocManager::install(c('Biostrings', 'GenomicAlignments', 'IRanges'))
        install.packages(c('shazam', 'alakazam', 'tigger', 'airr', 'optparse'))
      shell: Rscript {0}

    - name: Install macOS R dependencies
      if: matrix.config.os != 'ubuntu-latest'
      run: |
        options(install.packages.compile.from.source = "never")
        install.packages(c('RCurl','XML'))
        remotes::install_cran("BiocManager")
        BiocManager::install(version = ${{ steps.R.outputs.biocversion}}, ask = FALSE)
        BiocManager::install(c('GenomeInfoDb', 'Rsamtools'))
        BiocManager::install(c('Biostrings', 'GenomicAlignments', 'IRanges'))
        install.packages('matrixStats')
        install.packages(c('shazam', 'alakazam', 'tigger', 'airr', 'optparse'))
      shell: Rscript {0}

    - name: Test if R dependencies are installed properly      
      run: |
        Rscript check/vdj.R
      shell: bash -l {0}